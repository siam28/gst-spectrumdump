#!/usr/bin/env python2
# -*- coding: utf-8 -*-
### MPD Spectrum Dump ##########
# V20120910-1 by Scott Garrett #
# Wintervenom [(at)] gmail.com #
################################
# Dependencies:
#
# pygobject
# gst-python (gstreamer0.10-python)
# gstreamer0.10-good
#
#################################

import sys
import getopt
import gobject
gobject.threads_init()
import pygst
pygst.require('0.10')
import gst
import math
import os
import textwrap



VERSION = 20120910-1
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)


def stdout(message):
    """
    Writes a message to STDOUT.
    """
    sys.stdout.write("{0}\n".format(message))
    sys.stdout.flush()


def stderr(message):
    """
    Writes a message to STDERR.
    """
    sys.stderr.write("{0}\n".format(message))
    sys.stderr.flush()


def fatal(error):
    """
    Output an error message to STDERR and exit with status 1.
    """
    stderr("Error: {0}".format(error))
    exit(1)


def usage():
    text = """
    GStreamer Spectrum Analyzer Dump
    Version {1} by Scott Garrett
    Wintervenom [(at)] gmail.com

    Usage: {0} [opts]
        -h --help       Obvious.  ;)
           --fifo=      Path to MPD FIFO.
                        (default: /tmp/mpd.fifo).
        -b --bands=     Number of frequency bands to output.
                        (default: 20; valid: 1-128)
        -s --scale=     Scale magnitudes to this value.
                        (default: 100; valid: n > 0)
        -v --vu         Return VU meter dump instead of spectrum dump.
                        The band option will be the maxiumum number of
                        channels to output.  --threshold is ignored.
        -i --interval=  Milliseconds between updates.
                        (default: 50; valid: n > 0)
        -e --iec        Convert decibels to percentages using IEC 60268-18
                        scaling.
    """
    text = text.format(os.path.basename(sys.argv[0]), VERSION)
    stderr(textwrap.dedent(text))
    exit(2)


class GstSpectrumDump(object):
    """
    Dumps the spectrum magnitudes of incoming audio as volume units per band.

    Optional arguments:
    <fifo>          Path to MPD FIFO (default: /tmp/mpd.fifo).
    <bands>         How many frequency bands to output (default: 20).
    <threshold>     Minimal magnitude of a band in decibels (default: 70).
    <cufoff>        Cut off magnitudes at this value after amplification has
                    been applied (default: 100).
    <scale>         Scale magnitudes to this value (default: 100).
    <iec>           Convert decibels to percentages with IEC 60268-18 scaling
                    (default: False).
    <vumeter>       Return VU meter output instead of spectrum.  <bands>
                    controls how many channels to output here.  <threshold> is
                    ignored.
    <interval>      Milliseconds to wait between polls (default: 50).
    <quiet>         Don't output to STDERR (default: False if no callback).
    <callback>      Return the magnitude list to this function (default: None).
    """
    def __init__(self, **opts):
        self.fifo = opts.get('fifo', '/tmp/mpd.fifo')
        self.bands = opts.get('bands', 20)
        self.threshold = opts.get('threshold', 70)
        self.scaleto = opts.get('scale', 100)
        self.db = opts.get('db', False)
        self.iec = opts.get('iec', False)
        self.vumeter = opts.get('vumeter', False)
        self.interval = opts.get('interval', 50)
        self.callback = opts.get('callback')
        self.quiet = opts.get('quiet', self.callback is not None)
        pipeline = 'filesrc location={} ! audio/x-raw-int, ' \
                   'rate=44100, channels=2, endianness=1234, width=16, ' \
                   'depth=16, signed=true ! audioconvert'
        self.pipeline = pipeline.format(self.fifo)


    def printopts(self):
        opts = {
            'fifo': self.fifo,
            'bands': self.bands,
            'threshold': self.threshold,
            'scaleto': self.scaleto,
            'db': self.db,
            'iec': self.iec,
            'vumeter': self.vumeter,
            'interval': self.interval,
            'quiet': self.quiet,
            'pipeline': self.pipeline,
        }
        stderr('# MPD Spectrum Dump')
        stderr('# Version {0} by Scott Garrett'.format(VERSION))
        stderr('')
        stderr('[Parameters]')
        for k, v in opts.iteritems():
            stderr('{0:>10}: {1}'.format(k, v))


    def dbtopct(self, db):
        if self.iec:
            pct = 0.0
            if db < -70.0:
                pct = 0.0
            elif db < -60.0:
                pct = (db + 70.0) * 0.25
            elif db < -50.0:
                pct = (db + 60.0) * 0.5 + 2.5
            elif db < -40.0:
                pct = (db + 50.0) * 0.75 + 7.5
            elif db < -30.0:
                pct = (db + 40.0) * 1.5 + 15.0
            elif db < -20.0:
                pct = (db + 30.0) * 2.0 + 30.0
            elif db < 0.0:
                pct = (db + 20.0) * 2.5 + 50.0
            else:
                pct = 100.0
        else:
            pct = (self.threshold + db) / float(self.threshold) * 100
        return int(round(pct * (self.scaleto / 100.0), 0))
        #return pct * (self.scaleto / 100.0)


    def on_message(self, bus, message):
        try:
            s = message.structure
            name = s.get_name()
            m = []
            if name == 'spectrum':
                for d in zip(*s['magnitude']):
                    m.append(self.dbtopct(sum(d) / len(d)))
            elif name == 'level':
                for channel in range(0, min(self.bands, len(s['peak']))):
                    peak = max(-self.threshold, min(0, s['peak'][channel]))
                    decay = max(-self.threshold, min(0, s['decay'][channel]))
                    peak = self.dbtopct(peak)
                    decay = self.dbtopct(decay)
                    m.append(peak)
                    m.append(decay)
            else:
                return True
            if not self.quiet:
                try:
                    print(' '.join((str(d) for d in m)))
                except IOError:
                    self.loop.quit()
            if self.callback:
                self.callback(m)
        except KeyboardInterrupt:
            self.loop.quit()
        return True


    def start_pipeline(self):
        pipeline = [self.pipeline]
        interval = 'interval={0}'.format(1000000 * self.interval)
        if self.vumeter:
            pipeline.append('level message=true {}'.format(interval))
        else:
            spectrum = 'spectrum message=true {} bands={} threshold=-{} multi-channel=true'
            spectrum = spectrum.format(interval, self.bands, self.threshold)
            pipeline.append(spectrum)
        pipeline.append('fakesink')
        self.pipeline = gst.parse_launch(' ! '.join(pipeline))
        self.bus = self.pipeline.get_bus()
        self.bus.enable_sync_message_emission()
        self.bus.add_signal_watch()
        self.conn = self.bus.connect("message::element", self.on_message)
        self.pipeline.set_state(gst.STATE_PLAYING)


    def stop_pipeline(self):
        if self.pipeline:
            self.bus.disconnect(self.conn)
            self.bus.remove_signal_watch()
            self.pipeline.set_state(gst.STATE_NULL)


    def run(self):
        try:
            self.start_pipeline()
            self.loop = gobject.MainLoop()
            try:
                self.loop.run()
            except KeyboardInterrupt:
                pass
            self.stop_pipeline()
            exit(0)
        except gobject.GError as error:
            stderr('Error creating pipeline: {0}'.format(error))
            stderr('Do you have gstreamer0.10-good installed?')
            exit(1)


if __name__ == "__main__":
    opt_bands = 20
    opt_interval = 50
    opt_scale = 100
    opt_iec = False
    opt_vumeter = False
    opt_fifo = '/tmp/mpd.fifo'

    try:
        longopts = ['fifo=', 'bands=', 'scale=', 'vu', 'interval=', 'iec', 'help']
        shortopts = 'b:i:s:evh'
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError as error:
        stderr(error)
        usage()
    for o, a in opts:
        if o == '--fifo':
            opt_fifo = a
        elif o in ('-b', '--bands'):
            if a.isdigit():
                opt_bands = max(1, min(128, int(a)))
            else:
                fatal('Bands should be an integer between 1 and 128.')
        elif o in ('-i', '--interval'):
            try:
                if a == 0:
                    raise ValueError
                opt_interval = int(a)
            except ValueError:
                fatal('Interval should be an integer greater than zero.')
        elif o in ('-s', '--scale'):
            try:
                if a in ('inf', 0):
                    raise ValueError
                opt_scale = float(a)
            except ValueError:
                fatal('Scale should be a float greater than zero.')
        elif o in ('-v', '--vu'):
            opt_vumeter = True
        elif o in ('-e', '--iec'):
            opt_iec = True
        elif o in ('-h', '--help'):
            usage()
    spectrum = GstSpectrumDump(
        fifo=opt_fifo,
        bands=opt_bands,
        scale=opt_scale,
        iec=opt_iec,
        vumeter=opt_vumeter,
        interval=opt_interval
    )
    spectrum.printopts()
    spectrum.run()

